play.modules.enabled += com.lightbend.lagom.recipes.mixedpersistence.hello.impl.HelloModule

# Disable the Lagom JDBC persistence module.
# This requires some Guice bindings to be explicitly set: see HelloModule.
play.modules.disabled += com.lightbend.lagom.javadsl.persistence.jdbc.JdbcPersistenceModule

# Cassandra write-side configuration.
hello.cassandra.keyspace = hello

cassandra-journal.keyspace = ${hello.cassandra.keyspace}
cassandra-snapshot-store.keyspace = ${hello.cassandra.keyspace}

# Cassandra read-sides are unused in this example, but the offsetstore is still automatically created by default.
# It is possible to mix both Cassandra and JDBC/JPA read-side processors in the same service this way.
lagom.persistence.read-side.cassandra.keyspace = ${hello.cassandra.keyspace}

# JPA read-side configuration.
db.default {
  driver = "org.h2.Driver"
  url = "jdbc:h2:mem:hello-service"
}

jdbc-defaults.slick.profile = "slick.jdbc.H2Profile$"

# Finally, ensure that Cassandra is used for the journal and snapshot-store
# Lagom's Cassandra and JDBC persistence modules both define these properties,
# so the order they are applied is non-deterministic.
akka.persistence {
  journal {
    plugin = cassandra-journal
  }

  snapshot-store {
    plugin = cassandra-snapshot-store
  }
}

lagom.services {
  cas_native = "tcp://localhost:9042"
}

play.http.secret.key=foo
pidfile.path = "/dev/null"

akka.remote.netty.tcp {
  port = 2552
  hostname = localhost
}

akka.cluster.seed-nodes = [
  "akka.tcp://application@localhost:2552"
]

cinnamon.opentracing.tracer {
  sampler = const-sampler
}

cinnamon.akka {
  actors {
    "/user/*" {
      report-by = class
      traceable = on
    }
    "/system/sharding/*" {
      report-by = class
      traceable = on
    }
  }
}

cinnamon.akka.http {
  clients {
    "*:*" {
      paths {
        "*" {
          metrics = on
          traceable = on
        }
      }
    }
  }
  servers {
    "*:*" {
      paths {
        "*" {
          metrics = on
          traceable = on
        }
      }
    }
  }
}
